1. 연산자와 연산식에 대한 설명 중 틀린 것은 무엇입니까? 
1) 연산자는 피연산자의 수에 따라 단항, 이항, 삼항 연산자로 구분된다.
2) 비교 연산자와 논리 연산자의 산출 타입은 boolean(true/false)이다.
3) 연산식은 하나 이상의 값을 산출할 수도 있다.
4) 하나의 값이 올 수 있는 자리라면 연산식도 올 수 있다.

2. 다음 코드를 실행했을 때 출력 결과는 무엇입니까? 31
1	public class Exercise02 {
2	    public static void main(String[] args) {	
3	        int x = 10;
4	        int y = 20;
5	        int z = (++x) + (y--);
6	        System.out.println(z);
7	    }
8	}

3. 다음 코드를 실행했을 때 출력 결과는 무엇입니까? 가
1	public class Exercise03 {
2	    public static void main(String[] args) {
3	        int score = 85;
4	        String result = (!(score>90)) ? "가" : "나";
5	        System.out.println(result);
6	    }
7	}

4. 534자루의 연필을 30명의 학생들에게 똑같은 개수로 나누어 줄 때 학생당 몇 개를 가질 수 있고, 
  최종적으로 몇 개가 남는지를 구하는 코드입니다. 	#1 pencils / students, #2 pencils % students
  ( #1 )과 ( #2 )에 들어갈 알맞은 코드를 작성하세요.
1	public class Exercise04 {
2	    public static void main(String[] args) {
3	        int pencils = 534;
4	        int students = 30;
5 
6	        // 학생 한 명이 가지는 연필 수
7	        int pencilsPerStudent = (  #1  );
8	        System.out.println(pencilsPerStudent);
9        
10	        // 남은 연필 수
11	        int pencilsLeft = (  #2  );
12	        System.out.println(pencilsLeft);
13	    }
14	}
       


5. 다음은 십의 자리 이하를 버리는 코드입니다. 변수 value의 값이 356이라면 300이 나올 수 있도록 
( #1 )에 알맞은 코드를 작성하세요(산술 연산자만 사용하세요).
1	public class Exercise05 {
2	    public static void main(String[] args) {
3	        int value = 356;   
4	        System.out.println(  #1  );
5	    }
6	}
356 % 300 = 56  -> 356 - (356 % 300) => value - (value % 300)
(int) value / 100 * 100

6. 다음 코드는 사다리꼴의 넓이를 구하는 코드입니다. 정확히 소수자릿수가 나올 수 있도록 
( #1 )에 알맞은 코드를 작성하세요.
1	public class Exercise06 {
2	    public static void main(String[] args) {
3	        int lengthTop = 5;
4	        int lengthBottom = 10;
5	        int height = 7;
6	        double area = (  #1  );			
7	        System.out.println(area);
8	    }
9	}
(double) (lengthTop + lengthBottom) / 2 * height

7. 다음 코드는 비교 연산자와 논리 연산자의 복합 연산식입니다. 연산식의 출력 결과를 괄호( ) 속에 넣으세요.
1	public class Exercise07 {
2	    public static void main(String[] args) {
3	        int x = 10;
4	        int y = 5;
5 
6	        System.out.println( (x>7) && (y<=5) );                (  true  )
7	        System.out.println( (x%3 == 2) || (y%2 != 1) );        (  false  )
8	    }
9	}
(x>7) && (y<=5) -> true && true => true
(x%3 == 2) || (y%2 != 1) -> false || false => false

8.  다음은 %연산을 수행한 결과값에 10을 더하는 코드입니다. NaN값을 검사해서 올바른 결과가 출력될 수 있도록
 ( #1 )에 들어갈 NaN을 검사하는 코드를 작성하세요.
1	public class Exercise08 {
2	    public static void main(String[] args) {
3	        double x = 5.0;
4	        double y = 0.0;
5    
6	        double z = x % y;	//x % y : NaN			//x / y : Infinte
8	        if(  #1  ) {
9            	System.out.println("0.0으로 나눌 수 없습니다.");
10	        } else {
11	            double result = z + 10;
12	            System.out.println("결과: " + result);
13	        }
14	    }
15	}
Double.valueOf(z) => X => 이 메서드는 괄호 안의 값을 double 타입의 실수로 변경  -> z = "NaN"
답안 : Double.isNaN(z) => isNaN()는 z가 NaN 값이라면, true, NaN 값이 아니면, false
Double.isDouble(z) => z가 double 타입의 데이터라면, true, 아니면, false
Double.isInfinite(z) => z가 Infinite 이라면, true, 아니면 false







